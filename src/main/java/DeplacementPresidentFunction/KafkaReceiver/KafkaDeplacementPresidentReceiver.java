package DeplacementPresidentFunction;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.kafka010.ConsumerStrategies;
import org.apache.spark.streaming.kafka010.KafkaUtils;
import org.apache.spark.streaming.kafka010.LocationStrategies;
import beans.DeplacementPresident;
import org.apache.kafka.common.serialization.StringDeserializer;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.function.Supplier;

@RequiredArgsConstructor
@Slf4j

public class KafkaDeplacementPresidentReceiver implements Supplier<JavaDStream<DeplacementPresident>> {

    private final List<String> topics;
    private final JavaStreamingContext jsc;

    private final TextToDeplacementPresidentFuncKafka textToDeplacementPresidentFuncKafka = new TextToDeplacementPresidentFuncKafka();
    private final Function<String, DeplacementPresident> mapper = textToDeplacementPresidentFuncKafka::apply;

    private final Map<String, Object> kafkaParmas = new HashMap<String, Object>(){{
        put("bootstrap.servers", "localhost:9092");
        put("key.deserializer", StringDeserializer.class);
        put("value.deserializer", StringDeserializer.class);
        put("group.id", "spark-kafka-integ");
        put("auto.offset.reset", "earliest");
    }};

    @Override
    public JavaDStream<DeplacementPresident> get() {

        JavaInputDStream<ConsumerRecord<DeplacementPresident, DeplacementPresident>> directStream = KafkaUtils.createDirectStream(
        jsc,
                LocationStrategies.PreferConsistent(),
                ConsumerStrategies.Subscribe(topics,kafkaParmas)
        );
        JavaDStream<DeplacementPresident> javaDStream = directStream.map(ConsumerRecord::value);
        return javaDStream;

       // directStream.print();
        //return directStream.map(t -> t._1().toString()).map(mapper);
    }






}
