package DeplacementPresidentReader;

import lombok.Builder;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import org.apache.hadoop.fs.FileStatus;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import java.util.function.Supplier;
@RequiredArgsConstructor
@Builder
@Data
public class DeplacementPresidentReader implements Supplier<Dataset<Row>> {

    private  final SparkSession sparkSession ;
    private final FileSystem hdfs;
    private  final String inputPath ;

    @Override
    public Dataset<Row> get() {

        try {
            Path pathInput = new Path(inputPath);
            if (hdfs.exists(pathInput)){

                FileStatus[] listFiles= hdfs.listStatus(pathInput);
                Arrays.stream(listFiles).filter(t -> !t.isDirectory()).map(f -> f.getPath().toString()).toArray(String[]::new);

                Dataset<Row> ds = sparkSession.read().option("delimiter" , ";")
                        .option("header" , "true")
                        .csv(inputPath) ;
                return ds;

            }
            return sparkSession.emptyDataFrame();
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }


    }

}
