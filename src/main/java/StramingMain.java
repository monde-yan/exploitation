import DeplacementPresidentFunction.DeplacementPresidentReader.DeplacementPresidentReader;
import DeplacementPresidentFunction.Parser.DeplacementPresidentMapper;
import DeplacementPresidentFunction.Processor.DeplacementPresidentStreamProcessor;
import DeplacementPresidentFunction.Receiver.DeplacementPresidentReceiver;
import beans.DeplacementPresident;
import com.typesafe.config.Config;
import com.typesafe.config.ConfigFactory;
import lombok.extern.slf4j.Slf4j;
import org.apache.hadoop.fs.FileSystem;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.function.VoidFunction;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.api.java.JavaStreamingContext;

import java.io.IOException;


@Slf4j
public class StramingMain {
    public static void main(String[] args) throws IOException, InterruptedException {



        log.info("Hello world!");


        Config config = ConfigFactory.load("application.conf") ;
        String masterUrl = config.getString("app.spark.Master") ;
        String appName = config.getString("app.spark.appName") ;
        
        SparkSession spark = SparkSession.builder()
                .master(masterUrl)
                .appName(appName)
                .getOrCreate() ;

        String inputPath = config.getString("app.data.input") ;
        String outputPath = config.getString("app.data.output") ;
        String checkpointPath = config.getString("app.data.checkpoint");

        log.info("\ninputPath={}\noutputPath={}\ncheckPoint={}", inputPath, outputPath, checkpointPath);
        log.info("\nspark.MasterUrl={}\nspark.appName={}", masterUrl, appName);

        SparkConf sparkConf = new SparkConf().setMaster(masterUrl).setAppName(appName);
        JavaStreamingContext jsc = new JavaStreamingContext(
                sparkConf,
                new Duration(1000 * 10)
        );

        SparkSession sparkSession = SparkSession.builder().config(sparkConf).getOrCreate();

        FileSystem hdfs = FileSystem.get(sparkSession.sparkContext().hadoopConfiguration());
        log.info("fileSystem got from sparkSession in the main : hdfs.getScheme = {}", hdfs.getScheme());

        DeplacementPresidentReceiver receiver = new DeplacementPresidentReceiver(inputPath, jsc);
        DeplacementPresidentStreamProcessor streamProcessor = new DeplacementPresidentStreamProcessor(sparkSession, outputPath);

        receiver.get().foreachRDD((VoidFunction<JavaRDD<DeplacementPresident>>) streamProcessor);

        jsc.start();
        jsc.awaitTerminationOrTimeout(1000 * 60 * 8);

//        SparkSession spark = SparkSession.builder()
//                .master(masterUrl)
//                .appName(appName)
//                .getOrCreate() ;
//initialiser un objet qui va pointer sur mon objet java
//        FileSystem hdfs = FileSystem.get(spark.sparkContext().hadoopConfiguration());
//
//
//        DeplacementPresidentReader deplacementPresidentReader = DeplacementPresidentReader.builder()
//                .sparkSession(spark)
//                .hdfs(hdfs)
//                .inputPath(inputPath)
//                .build();
//
//        DeplacementPresidentReader ddeplacementPresidentReader = new DeplacementPresidentReader(spark ,hdfs, inputPath) ;
//        Dataset<Row> ds = deplacementPresidentReader.get();
//   //     ds.printSchema();
//    //    ds.show(5, false);
//        //Transformation de la dataset de row en deplacementPresident
//        Dataset<DeplacementPresident> dsa = new DeplacementPresidentMapper().apply(ds);
//        //dsa.printSchema();
        //dsa.show(5, false);
            //function aggregation
       // DeplacementPresidentAgregation dsaa = new DeplacementPresidentAgregation();
        //Dataset<Row> rowDataset = dsaa.apply(dsa);
        //rowDataset.printSchema();
        //rowDataset.show(10,false);

        //DeplacementPresidentWriter deplacementPresidentWriter = new DeplacementPresidentWriter(outputPath) ;
        //deplacementPresidentWriter.accept(ds);


        //DeplacementPresidentStatFunction  DeplacementPresidentStatFunction = new DeplacementPresidentStatFunction() ;

        //DeplacementPresidentWriter.accept(DeplacementPresidentStatFunction.apply(DeplacementPresidentReader.get()));



    }
}