package org.example;

import DeplacementPresidentFunction.Parser.DeplacementPresidentMapper;
import DeplacementPresidentFunction.DeplacementPresidentReader.DeplacementPresidentReader;
import beans.DeplacementPresident;
import com.typesafe.config.Config;
import com.typesafe.config.ConfigFactory;
import lombok.extern.slf4j.Slf4j;
import org.apache.hadoop.fs.FileSystem;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;

import java.io.IOException;


@Slf4j
public class Main {
    public static void main(String[] args) throws IOException {



        System.out.println("Hello world!");


        Config config = ConfigFactory.load("application.conf") ;
        String masterUrl = config.getString("app.spark.Master") ;
        String appName = config.getString("app.spark.appName") ;
        SparkSession spark = SparkSession.builder()
                .master(masterUrl)
                .appName(appName)
                .getOrCreate() ;
//initialiser un objet qui va pointer sur mon objet java
        FileSystem hdfs = FileSystem.get(spark.sparkContext().hadoopConfiguration());

        String inputPath = config.getString("app.data.input") ;
        String outputPath = config.getString("app.data.output") ;


        DeplacementPresidentReader deplacementPresidentReader = DeplacementPresidentReader.builder()
                .sparkSession(spark)
                .hdfs(hdfs)
                .inputPath(inputPath)
                .build();

        DeplacementPresidentReader ddeplacementPresidentReader = new DeplacementPresidentReader(spark ,hdfs, inputPath) ;
        Dataset<Row> ds = deplacementPresidentReader.get();
   //     ds.printSchema();
    //    ds.show(5, false);
        //Transformation de la dataset de row en deplacementPresident
        Dataset<DeplacementPresident> dsa = new DeplacementPresidentMapper().apply(ds);
        //dsa.printSchema();
        //dsa.show(5, false);
            //function aggregation
       // DeplacementPresidentAgregation dsaa = new DeplacementPresidentAgregation();
        //Dataset<Row> rowDataset = dsaa.apply(dsa);
        //rowDataset.printSchema();
        //rowDataset.show(10,false);

        //DeplacementPresidentWriter deplacementPresidentWriter = new DeplacementPresidentWriter(outputPath) ;
        //deplacementPresidentWriter.accept(ds);


        //DeplacementPresidentStatFunction  DeplacementPresidentStatFunction = new DeplacementPresidentStatFunction() ;

        //DeplacementPresidentWriter.accept(DeplacementPresidentStatFunction.apply(DeplacementPresidentReader.get()));



    }
}