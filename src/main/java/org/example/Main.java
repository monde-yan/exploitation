package org.example;

import DeplacementPresidentFunction.DeplacementPresidentAgregation;
import DeplacementPresidentFunction.DeplacementPresidentMapper;
import DeplacementPresidentFunction.DeplacementPresidentStatFunction;
import DeplacementPresidentReader.DeplacementPresidentReader;
import com.typesafe.config.Config;
import com.typesafe.config.ConfigFactory;
import lombok.extern.slf4j.Slf4j;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;

@Slf4j
public class Main {
    public static void main(String[] args) {

        System.out.println("Hello world!");


        Config config = ConfigFactory.load("application.conf") ;
        String masterUrl = config.getString("app.spark.Master") ;
        String appName = config.getString("app.spark.appName") ;
        SparkSession spark = SparkSession.builder()
                .master(masterUrl)
                .appName(appName)
                .getOrCreate() ;
        String inputPath = config.getString("app.path.input") ;
        String outputPath = config.getString("app.path.output") ;
        DeplacementPresidentReader deplacementPresidentReader = new DeplacementPresidentReader(spark , inputPath) ;
        Dataset<Row> ds = deplacementPresidentReader.get();
   //     ds.printSchema();
    //    ds.show(5, false);
        //Transformation de la dataset de row en deplacementPresident
        Dataset<DeplacementPresident> dsa = new DeplacementPresidentMapper().apply(ds);
        //dsa.printSchema();
        //dsa.show(5, false);
            //function aggregation
       // DeplacementPresidentAgregation dsaa = new DeplacementPresidentAgregation();
        //Dataset<Row> rowDataset = dsaa.apply(dsa);
        //rowDataset.printSchema();
        //rowDataset.show(10,false);

        //DeplacementPresidentWriter deplacementPresidentWriter = new DeplacementPresidentWriter(outputPath) ;
        //deplacementPresidentWriter.accept(ds);


        //DeplacementPresidentStatFunction  DeplacementPresidentStatFunction = new DeplacementPresidentStatFunction() ;

        //DeplacementPresidentWriter.accept(DeplacementPresidentStatFunction.apply(DeplacementPresidentReader.get()));



    }
}